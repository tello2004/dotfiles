<?xml version="1.0" encoding="UTF-8"?>
<language id="coffee" name="CoffeeScript" version="2.0" _section="Source">
    <metadata>
        <property name="mimetypes">application/coffeescript;text/coffeescript</property>
        <property name="globs">*.coffee</property>
    </metadata>

    <styles>
        <style id="await"           name="Async Wait"               map-to="def:keyword"/>
        <style id="comment"         name="Comment"                  map-to="def:comment"/>
        <style id="error"           name="Error"                    map-to="def:error"/>
        <style id="string"          name="String"                   map-to="def:string"/>
        <style id="global"          name="Global Value"             map-to="def:special-constant"/>
        <style id="constant"        name="Constant"                 map-to="def:special-constant"/>
        <style id="boolean"         name="Boolean value"            map-to="def:boolean"/>
        <style id="statement"       name="Statement"                map-to="def:statement"/>
        <style id="loop"            name="Loop"                     map-to="def:keyword"/>
        <style id="conditional"     name="Conditional"              map-to="def:keyword"/>
        <style id="exception"       name="Exception"                map-to="def:error"/>
        <style id="operator"        name="Operator"                 map-to="def:keyword"/>
        <style id="keyword"         name="Keyword"                  map-to="def:keyword"/>
        <style id="assessor"        name="Assessor"                 map-to="def:identifier"/>
        <style id="regexp"          name="RegExp"                   map-to="def:special-char"/>
        <style id="function"        name="Function"                 map-to="def:function"/>
        <style id="application"     name="Application"              map-to="def:identifier"/>
        <style id="constructors"    name="Constructors"             map-to="def:type"/>
    </styles>

    <definitions>
        <context id="coffee">
            <include>

                <context id="await" style-ref="await">
                    <keyword>await</keyword>
                    <keyword>defer</keyword>
                </context>

                <!-- Comments -->
                <context id="block-comment" style-ref="comment">
                    <start>^[ \t]*###([^#]|$)</start>
                    <end>.*###([^#]|$)</end>
                    <include>
                        <context ref="def:in-comment"/>
                    </include>
                </context>

                <context id="line-comment" style-ref="comment">
                    <start>#</start>
                    <end>$</end>
                    <include>
                        <context ref="def:line-continue"/>
                        <context ref="def:in-comment"/>
                    </include>
                </context>

		          <context id="regex-line-comment" style-ref="comment">
                    <start> #</start>
                    <end>$</end>
                    <include>
                        <context ref="def:line-continue"/>
                        <context ref="def:in-comment"/>
                    </include>
                </context>

                <!-- Regexps -->
                <context id="regexp" style-ref="regexp">
                    <match>(?&lt;!\d)\s*/(?![\s/*+{}?]).*?[^\\]/[igmy]*</match>
                </context>

                <context id="heregex" style-ref="regexp">
                    <start>\/\/\/</start>
                    <end>\/\/\/</end>
                    <include>
                        <context ref="def:line-continue"/>
                        <context ref="regex-line-comment"/>
                    </include>
                </context>

                <!-- Strings -->
                <context id="string-heredocs-single" style-ref="string">
                    <start>'''</start>
                    <end>'''</end>
                    <include>
                        <context ref="def:line-continue"/>
                        <context ref="def:escape"/>
                    </include>
                </context>

                <context id="string-heredocs-double" style-ref="string">
                    <start>"""</start>
                    <end>"""</end>
                    <include>
                        <context ref="def:line-continue"/>
                        <context ref="def:escape"/>
                        <context id="interpolation-heredocs-double" style-ref="assessor" extend-parent="false">
                            <match>\#{[^}]+}</match>
                        </context>
                    </include>
                </context>

                <context id="string-double" style-ref="string">
                    <start>"</start>
                    <end>"</end>
                    <include>
                        <context id="interpolation-string-double" style-ref="assessor" extend-parent="false">
                            <match>\#{[^}]+}</match>
                        </context>
                        <context ref="def:line-continue"/>
                        <context ref="def:escape"/>
                    </include>
                </context>

                <context id="string-single" style-ref="string">
                    <start>'</start>
                    <end>'</end>
                    <include>
                        <context ref="def:line-continue"/>
                        <context ref="def:escape"/>
                    </include>
                </context>

                <context id="string-javascript" style-ref="string">
                    <start>`</start>
                    <end>`</end>
                    <include>
                        <context ref="def:line-continue"/>
                        <context ref="def:escape"/>
                    </include>
                </context>


                <!-- Numbers -->
                <context ref="def:float"/>
                <context ref="def:decimal"/>
                <context ref="def:octal"/>
                <context ref="def:hexadecimal"/>

                <!-- Constants -->

                <context id="global" style-ref="global">
                    <keyword>undefined</keyword>
                    <keyword>null</keyword>
                </context>

                <context id="constant" style-ref="constant">
                    <match>\b[A-Z0-9_]+\b</match>
                </context>

                <context id="boolean" style-ref="boolean">
                    <keyword>false</keyword>
                    <keyword>true</keyword>
                    <keyword>yes</keyword>
                    <keyword>no</keyword>
                    <keyword>on</keyword>
                    <keyword>off</keyword>
                </context>

                <define-regex id="statement-keyword" extended="true">
                    \b(return|break|continue|throw)\b
                </define-regex>

                <define-regex id="loop-keyword" extended="true">
                    \b(for(\s+own)?|while|until|loop)\b
                </define-regex>

                <define-regex id="conditional-keyword" extended="true">
                    \b(if|else|unless|switch|when|then|and|or|in|of|by|is|isnt|
                    not)\b
                </define-regex>

                <define-regex id="keywords-keyword" extended="true">
                    \b(instanceof|typeof|delete|new|where|class|extends|super|
                    try|catch|finally|import|from)\b
                </define-regex>

                <define-regex id="operator-regex" extended="true">
                    (-[\-=>]?|\+[+=]?|[*&amp;|\/%=&lt;&gt;^~:!?]+)
                </define-regex>

                <define-regex id="novalue-keywords" extended="true">
                    \%{statement-keyword}|
                    \%{loop-keyword}|
                    \%{conditional-keyword}|
                    \%{keywords-keyword}
                </define-regex>

                <context id="statement" style-ref="statement">
                    <match>\%{statement-keyword}</match>
                </context>

                <context id="loop" style-ref="loop">
                    <match>\%{loop-keyword}</match>
                </context>

                <context id="conditional" style-ref="conditional">
                    <match>\%{conditional-keyword}</match>
                </context>

                <context id="operator" style-ref="operator">
                    <match>\%{operator-regex}([ \t]*)</match>
                </context>

                <!-- Keywords -->
                <context id="keywords" style-ref="keyword">
                    <match>\%{keywords-keyword}</match>
                </context>

                <context id="exception" style-ref="exception">
                    <keyword>try</keyword>
                    <keyword>catch</keyword>
                    <keyword>finally</keyword>
                </context>

                <context id="assessor" style-ref="assessor">
                    <match>(@([a-zA-Z\$_](\w|\$)*)|this)</match>
                </context>

                <context id="functions" style-ref="function">
                    <keyword>\b\w+\b(?=\s*(=|:)\s*(\(.*\))?\s*(-\>|=\>))</keyword>
                </context>

                <context id="constructors" style-ref="constructors">
                    <match>\b[A-Z][A-Za-z0-9_]+\b(?!\.)</match>
                </context>

                <context id="application" style-ref="application">
                    <match extended="true">
                    \b @? [A-Za-z0-9_]+ (
                        (?= [(]) |
                        \s+ (
                            (?= [=-]>) |
                            (?=\S)(?!
                                \%{novalue-keywords} | [\])}=:,#] |
                                [-+*/]= | \%{operator-regex}\s )
                        )
                    )
                    </match>
                </context>
            </include>
        </context>
    </definitions>
</language>

